#!/usr/bin/env python3

# zxngdefmt



__version__ = "0.1"



import re
import sys



# --- constants ---



# document-level commands
#
# This defines the order in which the commands are written in an output
# guide, as well as to construct the regular expression of commands to
# match.

DOC_CMDS = [
    "title",
    "author",
    "copyright",
    "version",
    "date",
    "build",
    "index",
]


# <?>_RE = string
#
# Regular expressions to match various bits of NextGuide markup.


# link to another node
LINK_RE = r'@{ *"(?P<link_text>[^"]+)" LINK (?P<link_target>[^ }]+) *}'

# formatting attribute
ATTR_RE = r"@{\w+}"

# literal characters
LITERALTOKEN_RE = r"@(?P<char>[^{])"

# plain (unformatted) word (as opposed to markup)
WORD_RE = r"[^@ ]+"

# one or more spaces
SPACE_RE = r"(?P<space> +)"

# match any type of markup token or word or block of spaces
TOKEN_RE = (r"(?P<token>"
            + LINK_RE
            + r'|' + ATTR_RE
            + r'|' + LITERALTOKEN_RE
            + r'|' + WORD_RE
            + r'|' + SPACE_RE
            + r')'
            + r"(?P<remainder>.*)")

# matching document-level tokens
DOC_CMDS_RE = (r"@(?P<cmd>" + '|'.join(DOC_CMDS) + r")( (?P<value>.+))?")

# start of a node
NODE_CMDS_RE = r"@node (?P<name>\S+)"

# matching a linked node token (for constructing node links)
NODAL_CMDS_RE = r"@(?P<link>(node|prev|next|toc)) (?P<name>\S+)"

# lines to ignore:
#
# - a token with hyphens (a separator between nodes), or
#
# - a remark command
IGNORE_RE = r"@(-+|rem\s)"


# LITERALLINE_RE = string
#
# Regular expression to match lines which must be included in the output
# guide literally (i.e. without reformatting).

LITERALLINE_RE = (
    r'('

    # lines with leading spaces
    + r"\s+"

    # lines with 3 or more consecutive spaces
    + r"|.+\s{3,}"

    # lines with headers
    + r"|.*@{h\d}"

    # lines with centred or right-justified text
    + r"|@{[cr]}"

    # lines consisting solely of a single link
    + r'|' + LINK_RE + r'$'

    + r')')


# maximum length for a single line in the output guide
#
# we lower this to 78 as there is a bug in NextGuide when links end at
# column 79 or greater; ideally we would detect those as a special, but
# that's something for later
#
# https://gitlab.com/thesmog358/tbblue/-/issues/127

LINE_MAXLEN = 78



# --- functions ---



def rendertoken(t):
    """Render a NextGuide token (which could be markup, or a literal
    word, or block of spaces) into the text that would be displayed on
    screen (ignoring formatting).  This is used to work out the length
    of rendered markup and calculate displayed line lengths; it is not
    used to generate output.
    """

    # if the token is a link, use the displayed text field
    m = re.match(LINK_RE, t)
    if m:
        return m["link_text"]

    # if the token is a literal character, convert that to the displayed
    # character
    m = re.match(LITERALTOKEN_RE, t)
    if m:
        c = m["char"]

        # '@(' is the copyright sign
        if c == "(":
            return "\N{COPYRIGHT SIGN}"

        else:
            return c

    # attribute formatting codes don't render to anything displayed
    m = re.match(ATTR_RE, t)
    if m:
        return ""

    # we have a literal word or block of spaces - just use that directly
    return t



class GuideNode(object):
    """Represents a node (page in a NextGuide document).

    TODO
    """


    def __init__(self, name):
        """Initialise a new node with the specified name.
        """

        super().__init__()

        # initialise the current node with the specified name
        self.name = name

        # no links to other documents yet
        self._links = {}

        # no lines yet
        self._lines = []

        # initialise list of warnings encountered
        self._warnings = []


    def setlink(self, link, node):
        """Unconditionally set the link to another node.  This is used
        when a node explicitly sets the link.
        """

        self._links[link] = node


    def setdefaultlink(self, link, node):
        """Set the link to another node only if this link is not yet
        defined.  This used when the entire document is completed and
        the missing links are filled in.
        """

        if node:
            self._links.setdefault(link, node)


    def getlink(self, link):
        """Return the link to the specified target from this node, or
        None if it is not defined.
        """

        return self._links.get(link)


    def getwarnings(self):
        """Return a list of warnings about this node.
        """

        return self._warnings


    def appendline(self, l):
        """Add a raw line to the current node.
        """

        self._lines.append(l)


    def write(self, *, doc_name=None, node_docs={}):
        # the current line being assembled
        line_markup = ""
        line_render = ""

        # any spaces
        pre_space = ""

        word_markup = ""
        word_render = ""


        # formatted lines in the output
        output = ["@node " + self.name]

        for link in ["prev", "next", "toc", "index"]:
            if link in self._links:
                output.append(f"@{link} {self._links[link]}")


        def writeline():
            nonlocal output, line_markup, line_render, pre_space

            if line_markup:
                output.append(line_markup)

                line_markup = ""
                line_render = ""

                pre_space = ""


        def completeword(space=""):
            """TODO
            """

            nonlocal line_markup, line_render, pre_space, word_markup, word_render

            # if no line or word, we have nothing to complete nor return, so
            # we're done
            if (not line_render) and (not word_render):
                return

            # start with no completed line to return and check if the stored
            # space and rendered word would fit on this line
            if (len(line_render + pre_space + word_render) > LINE_MAXLEN):
                # adding the current word would make it over length - render it
                writeline()

                # don't add the space, as we're beginning a new line

            else:
                # the current word will fit on this line - add the space, as
                # we're continuing the line
                line_markup += pre_space
                line_render += pre_space

            # add the current word to the line (either freshly cleared, or
            # continuing the current one)
            line_markup += word_markup
            line_render += word_render

            # start a new word with the supplied previous space
            pre_space = space
            word_markup = ""
            word_render = ""


        def appendtoken(t):
            """TODO
            """

            nonlocal word_markup, word_render

            word_markup += t
            word_render += rendertoken(t)


        for line in self._lines:
            # if the line is blank or is one that is used literally,
            # just add that to the document
            if (line == '') or re.match(LITERALLINE_RE, line):
                # finish the current line and append it
                writeline()

                # add the literal line
                output.append(line)

                continue

            # go through the line matching tokens (markup, literal or spaces)
            remainder = line
            while remainder:
                m = re.match(TOKEN_RE, remainder)

                if not m:
                    raise AssertionError(
                        "failed to match next token in: " + remainder)

                token, remainder = m.group("token", "remainder")
                #print(f"TOKEN >>> <{token}>")
                #print(f"REMAINDER >>> <{l}>")

                if m.group("space"):
                    # token is a space, complete the current word
                    completeword(space=token)

                elif m.group("link_text"):
                    # token is a link - potentially change the target to
                    # include the document prefix

                    text, target = m.group("link_text", "link_target")

                    if target in node_docs:
                        if node_docs[target] != doc_name:
                            target = node_docs[target] + '/' + target

                    else:
                        self._warnings.append(
                            f"link: '{text}' target: @{target} does not exist")

                else:
                    # token is not a space - add it
                    appendtoken(token)

            # end of line completes a word and adds a space
            completeword(space=" ")

        # if there is something in the buffer
        writeline()

        return output



class GuideDoc(object):
    """Class representing an entire NextGuide document.

    TODO
    """


    def __init__(self, filename):
        """Initialise a new raw document object, optionally reading in a
        source guide file.
        """

        super().__init__()

        # initialise the document
        self._cmds = {}
        self._nodes = []

        # initialise a list of warnings encountered when building the
        # document
        self._warnings = []

        # store the name of this document
        self.setname(filename)

        # read the file, set the default links and check it
        self.readfile(filename)
        self.checklinks()
        self.setdefaultlinks()


    def setname(self, name):
        """Sets the name of the guide.  This will 'normalise' the
        supplied name, removing '.gde' from the end, if it is present;
        if not, the complete name will be stored.
        """

        if name.endswith(".gde"):
            self._name = name[:-4]
        else:
            self._name = name


    def getname(self):
        """Return the name of the guide for use as the document part of
        links from other guides.
        """

        return self._name


    def readfile(self, filename):
        """Read a source NextGuide file and store it as a raw document.

        TODO
        """


        current_node = None

        with open(filename) as f:
            for l in f:
                # strip any trailing whitespace
                l = l.rstrip()

                # skip lines we want to ignore
                if re.match(IGNORE_RE, l):
                    continue

                # match document-level commands
                m = re.match(DOC_CMDS_RE, l)
                if m:
                    if not current_node:
                        self._cmds[m.group("cmd")] = m.group("value")
                    else:
                        self._warnings.append(
                            f"node: @{current_node.name} has document"
                            f"token: {l} - ignored")

                    continue

                # match the start of a new node
                m = re.match(NODE_CMDS_RE, l)
                if m:
                    # append the current node, if we have one
                    if current_node:
                        self._nodes.append(current_node)

                    # start a new node
                    current_node = GuideNode(m.group("name"))
                    continue

                # match node-level commands
                m = re.match(NODAL_CMDS_RE, l)
                if m:
                    current_node.setlink(*m.group("link", "name"))
                    continue

                # anything else is a line of markup data in the node
                current_node.appendline(l)

        # if we have a node we're assembling, append that
        if current_node:
            self._nodes.append(current_node)


    def setdefaultlinks(self):
        """Complete any missing data for inter-node links using
        defaults:

        - prev = the previous node in the document

        - next = the next node in the document

        - toc = the most recently-defined 'toc' entry
        """

        # fill in missing 'previous' and 'toc' (contents) links:
        prev_node = None
        toc_node = None
        for node in self._nodes:
            # set missing links for this node
            node.setdefaultlink("prev", prev_node)
            node.setdefaultlink("toc", toc_node)

            # store the information about this node to use in subsequent
            # ones, if required
            prev_node = node.name
            toc_node = node.getlink("toc")

        # fill in missing 'next' links
        next_node = None
        for node in reversed(self._nodes):
            node.setdefaultlink("next", next_node)
            next_node = node.name


    def checklinks(self):
        """Check links in the document and generate warnings if any are
        broken (to nodes which do not exist).
        """

        def checknodallink(link):
            """Check a particular nodal link exists.
            """

            link_name = node.getlink(link)
            if (link_name
                and all(node.name != link_name for node in self._nodes)):

                self._warnings.append(
                    f"node: @{node.name} link: {link} to non-existent"
                    f" node: @{link_name}")

        # check document-level links
        index = self._cmds.get("index")
        if index and all(node.name != index for node in self._nodes):
            self._warnings.append(f"index link to non-existent node: @{index}")

        # check node-level links
        for node in self._nodes:
            checknodallink("prev")
            checknodallink("next")
            checknodallink("toc")


    def getnodenames(self):
        """Return a list containing the names of all the nodes in the
        document.
        """

        return [ node.name for node in self._nodes ]


    def getwarnings(self):
        """Returns the list of warnings encountered when building the
        document.  The list will be empty if there were no warnings.
        """

        warnings = self._warnings.copy()

        for node in self._nodes:
            warnings.extend([ f"node: @{node.name} {warning}"
                                  for warning in node.getwarnings() ])

        return warnings


    def print(self, *, node_docs={}):
        """TODO - just print the document and nodes raw
        """

        for c in DOC_CMDS:
            if c in self._cmds:
                print(f"@{c}"
                      + (f" {self._cmds[c]}" if c in self._cmds else ""))

        for n in self._nodes:
            print()
            print('@' + ('-' * (LINE_MAXLEN - 1)))
            for l in n.write(doc_name=self.getname(), node_docs=node_docs):
                print(l)



class GuideSet(object):
    """Handles a set of GuideDocs with interconnecting links.

    TODO
    """

    def __init__(self, filenames):
        super().__init__()

        # initialise a list of documents in the set
        self._docs = []

        # initialise a dictionary mapping nodes to docs
        self._nodes = {}

        # initialise list of warnings at the set level (warnings from
        # individual documents are stored there and concatenated, when
        # requests by getwarnings())
        self._warnings = []

        self.readfiles(filenames)


    def readfiles(self, filenames):
        # go through the list of filenames and read a document from each one
        for filename in filenames:
            doc = GuideDoc(filename)

            # add this document to the list of documents in the set
            self._docs.append(doc)

            # go through the nodes in this new document
            for node_name in doc.getnodenames():
                # if a node with this name already exists, record a
                # warning and skip adding it
                if node_name in self._nodes:
                    self._warnings.append(
                        f"document: {doc.getname()} node:"
                        f" @{node_name} same name already exists in"
                        f" document: {self._nodes[node_name]} -"
                        f" ignoring")
                    continue

                # record this node as in this document
                self._nodes[node_name] = doc.getname()


    def getwarnings(self):
        """Return all the warnings from the set.

        This will include set-level warnings (e.g. a node name clashes
        between two documents).  It will also include all the
        document-level warnings, which will be prefixed with the name
        of the document.
        """

        warnings = self._warnings.copy()

        for doc in self._docs:
            warnings.extend([ f"document: {doc.getname()} {warning}"
                                  for warning in doc.getwarnings() ])

        return warnings


    def print(self):
        for doc in self._docs:
            print(f"=> DOC: {doc.getname()}")
            doc.print(node_docs=self._nodes)


guide_set = GuideSet(["NextBASIC.gde", "NextBASIC_pt2.gde"])

guide_set.print()

w = guide_set.getwarnings()
if w:
    print("Warnings:", file=sys.stderr)
    for w1 in w:
        print('-', w1, file=sys.stderr)

print("Nodes:", file=sys.stderr)
print(guide_set._nodes, file=sys.stderr)
